/*

The goal of this do file is to identify camera cluster pairs that are suitable
for the event study.

(1) Take the panel data set of cameras generated by
qgis_cluster_summary_statistics.do, merge it with the camera_projections.dta file
which was created by Gabriel's python projection script, and do a little bit
of manual data cleaning

(2) collapse to cluster level, convert direction to factor

(3) apply a series of filters to dataset to indentify candidates for event study

*/


{ // (1) merge camera data with projection data
	
	// merge camera data with camera projection variables
	clear all
	global s "/Users/san/Dropbox/sao_paulo_tickets_project/"
	cd "$s/gis/camera_locations2/"
	use "qgis_clustered.dta"
	generate id = fid
	merge 1:1 id using "$s/data/cameras_v2/camera_projections.dta"
	drop _merge

	// manually correct an observation
	replace direction = "Southwest" if fid == 149
	replace mm_lat = -23.527964 if fid == 149
	replace mm_long = -46.595898 if fid == 149
	replace mm_pos_on_route = 6442.0151 if fid == 149

	save "cameras_clustered_projected.dta", replace

	// list any clusters whose cameras are not all projected onto the same direction
	// Success if nothing is outputted to console
	by cluster (direction), sort: gen diff = direction[1] != direction[_N]
	list cluster direction if diff
	
	// list any clusters whose cameras are not all temporary or all permanent
	// Success if nothing is outputted to console
	by cluster (temp), sort: gen diff2 = temp[1] != temp[_N]
	list cluster temp if diff2

	save "cameras_clustered_projected.dta", replace	
}


{ // (2) collapse to cluster level, convert direction to factor
	
	// collapse to cluster level
	collapse cluster_size cluster_start_date cluster_end_date cluster_gmaps_seen cluster_gmaps_unseen (first) direction (median) mm_pos_on_route (min) temp, by(cluster)

	// convert direction from string variable to factor
	encode(direction), generate(direction_)
	drop direction
	rename direction_ direction

	save "event_study_selection_temp.dta", replace
	export delimited "event_study_selection_temp.csv", replace
}


{ // (3) apply filters to dataset to indentify candidates for event study

	/* You can loop over directions to have the script run once for each direction,
	and merge the results, or you can just loop over dir1 or dir2 individually. */
	levelsof(direction), local(directions)
	local dir1 1
	local dir2 2

	/* loop applies all filters on Northeast cameras, saves output, applies filters
on Southwest cameras, saves output, and then merges the two datasets */
	foreach dir of local dir1 {
		
		clear all
		use "event_study_selection_temp.dta"
		keep if direction == `dir'
		gsort mm_pos_on_route

		/* space_before shows the distance between current cluster and nearest previous
		cluster. space_after shows the distance between current cluster and nearest next
		cluster. */
		generate space_before = mm_pos_on_route - mm_pos_on_route[_n-1]
		generate space_after = mm_pos_on_route[_n+1] - mm_pos_on_route

		/* binary variable for if next cluster along route appears earlier than current
		cluster in Google Maps Street View history */
		generate next_is_earlier = 0
		replace next_is_earlier = 1 if cluster_gmaps_seen > cluster_gmaps_seen[_n+1]

		// select cameras whose previous neighbor is at least 100 meters away
		keep if space_before > 100

		// select cameras whose next neighbor is between 50 meters and 500 meters away
		keep if space_after < 500 & space_after > 50
		
		// select cameras that can be identified in Google Maps
		keep if cluster_gmaps_seen != .

		// select cameras where next neighbor along path is earlier
		keep if next_is_earlier == 1
		
		save "event_study_selection_temp_`dir'.dta", replace
		clear all
	}

	// combine output of filters for each direction
	foreach dir of local dir1 {
		append using "event_study_selection_temp_`dir'.dta"
	}
}


